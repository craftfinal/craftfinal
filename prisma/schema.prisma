// @/prisma/schema.prisma

// Prisma schema file,
// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // may use connection pooling
}

model Account {
  // id             String    @id @default(dbgenerated("concat('aup-', gen_random_uuid())"))
  id                String    @id @default(uuid())
  userId            String
  type              String
  provider          String // Name of the authentication provider, e.g., "clerk", "temporary" @map("name")
  providerAccountId String // Unique ID from the authentication provider @map("providerId")
  createdAt         DateTime  @default(now())
  lastModified      DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? // Field to track soft deletion
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure uniqueness for each provider and provider ID combination
  @@index([userId])
}

model User {
  // id             String    @id @default(dbgenerated("concat('usr-', gen_random_uuid())"))
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  lastModified  DateTime  @default(now()) @updatedAt
  deletedAt     DateTime? // Field to track soft deletion
  email         String?
  firstName     String?
  lastName      String?
  authProviders Account[]
  items         Resume[]
}

model Resume {
  // id           String         @id @default(dbgenerated("concat('res-', gen_random_uuid())"))
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  lastModified DateTime       @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String // User that owns this resume
  parent       User           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  items        Organization[] // Reference to organizations at which the user had a role
  name         String         @db.Text
  description  String         @default("") @db.Text

  @@index([parentId]) // Index for faster lookups on parentId
}

model Organization {
  // id           String    @id @default(dbgenerated("concat('org-', gen_random_uuid())"))
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  lastModified DateTime  @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String // Resume that contains this organization
  parent       Resume    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  items        Role[] // Reference to roles the user had at this organization
  name         String    @db.Text
  location     String    @default("") @db.Text

  @@index([parentId]) // Index for faster lookups on parentId
}

model Role {
  // id           String        @id @default(dbgenerated("concat('rol-', gen_random_uuid())"))
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  lastModified DateTime      @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String
  parent       Organization  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  items        Achievement[] // Reference to achievements the user made in this role
  name         String        @db.Text
  location     String        @default("") @db.Text

  @@index([parentId]) // Index for faster lookups on parentId
}

model Achievement {
  // id           String    @id @default(dbgenerated("concat('ach-', gen_random_uuid())"))
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  lastModified DateTime  @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String
  parent       Role      @relation(fields: [parentId], references: [id], onDelete: Cascade)
  content      String    @db.Text
  order        Float     @db.DoublePrecision

  @@unique([order, parentId, lastModified])
  @@index([parentId]) // Index for faster lookups on parentId
}
