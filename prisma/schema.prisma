// @/prisma/schema.prisma

// Prisma schema file,
// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  authProviderId String    @unique
  createdAt      DateTime  @default(now())
  lastModified   DateTime  @default(now()) @updatedAt
  deletedAt      DateTime? // Field to track soft deletion
  email          String?
  firstName      String?
  lastName       String?
  items          Resume[]
}

model Resume {
  id           String         @id @default(uuid()) @db.Uuid
  createdAt    DateTime       @default(now())
  lastModified DateTime       @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String         @db.Uuid // User that owns this resume
  parent       User           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  items        Organization[] // Reference to organizations at which the the user had a role
  name         String         @db.Text
  description  String         @default("") @db.Text

  @@index([parentId]) // Index for faster lookups on parentId
}

model Organization {
  id           String    @id @default(uuid()) @db.Uuid
  createdAt    DateTime  @default(now())
  lastModified DateTime  @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String    @db.Uuid // Resume that contains this organization
  parent       Resume    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  items        Role[] // Reference to roles the user had at this organization
  name         String    @db.Text
  location     String    @default("") @db.Text

  @@index([parentId]) // Index for faster lookups on parentId
}

model Role {
  id           String        @id @default(uuid()) @db.Uuid
  createdAt    DateTime      @default(now())
  lastModified DateTime      @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String        @db.Uuid
  parent       Organization  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  items        Achievement[] // Reference to achievements the user made in this role
  name         String        @db.Text
  location     String        @default("") @db.Text

  @@index([parentId]) // Index for faster lookups on parentId
}

model Achievement {
  id           String    @id @default(uuid()) @db.Uuid
  createdAt    DateTime  @default(now())
  lastModified DateTime  @default(now()) @updatedAt
  deletedAt    DateTime? // Field to track soft deletion
  parentId     String    @db.Uuid
  parent       Role      @relation(fields: [parentId], references: [id], onDelete: Cascade)
  content      String    @db.Text
  order        Float     @db.DoublePrecision

  @@unique([order, parentId, lastModified])
  @@index([parentId]) // Index for faster lookups on parentId
}
